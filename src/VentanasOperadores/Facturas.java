/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VentanasOperadores;

import Conexion.ConexionBD;
import Login.Login;
import VentanasAdministradores.AdministradorFacturacion;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import java.awt.*;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author mcore
 */
public final class Facturas extends javax.swing.JFrame {

    /**
     * Creates new form Facturas
     */
    private Statement sent = null;
    private Connection cc = null;
    private ResultSet rs = null;
    private PreparedStatement p = null;
    int xMouse;
    int yMouse;
    DefaultTableModel model1;

    public Facturas() {
        initComponents();
        setBackground(new Color(0, 0, 0, 0));
        LlenarTablaFacturas();
        ColumnasAutoajustadas(Tabla_Facturas, margin);
    }

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().
                getImage(ClassLoader.getSystemResource("Imagenes/Logo.png"));
        return retValue;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    /*
    Código para Autoajustar las Columnas acorde al resultado del dato más largo de una tabla SQL
    en un JTable
     */
    int vColIndex = 1;
    int margin = 2;

    public void ColumnasAutoajustadas(JTable Tabla_Facturas, int margin) {
        for (int c = 0; c < Tabla_Facturas.getColumnCount(); c++) {
            packColumnTablaFacturas(Tabla_Facturas, c, 2);
        }
    }

    public void packColumnTablaFacturas(JTable Tabla_Facturas, int vColIndex, int margin) {
        //model1 = (DefaultTableModel) jTable1.getModel();
        DefaultTableColumnModel colModel = (DefaultTableColumnModel) Tabla_Facturas.getColumnModel();

        TableColumn col = colModel.getColumn(vColIndex);
        int width;
        TableCellRenderer renderer = col.getHeaderRenderer();
        if (renderer == null) {
            renderer = Tabla_Facturas.getTableHeader().getDefaultRenderer();
        }
        Component comp = renderer.getTableCellRendererComponent(Tabla_Facturas, col.getHeaderValue(), false, false, 0, 0);
        width = comp.getPreferredSize().width;
        for (int r = 0; r < Tabla_Facturas.getRowCount(); r++) {
            renderer = Tabla_Facturas.getCellRenderer(r, vColIndex);
            comp = renderer.getTableCellRendererComponent(Tabla_Facturas, Tabla_Facturas.getValueAt(r, vColIndex), false, false, r, vColIndex);
            width = Math.max(width, comp.getPreferredSize().width);
        }
        width += 2 * margin;
        col.setPreferredWidth(width);
    }

    public boolean DatosLlenosFactura() {

        return !orden_compra_dt.getText().equals("") && !importe_line_PO.getText().equals("")
                && !total_line_amount.getText().equals("") && !status_line_PO.getText().equals("");
    }

    public void BuscarPO() {
        String buscarpo = po.getText();
        String fechapublicacion = ((JTextField) publish.getDateEditor().getUiComponent()).getText();
        try {
            cc = ConexionBD.getcon();
            String[] titulos = {"ID Asignación", "Fecha de Asignación", "ID", "PO NO", "ID Usuario",
                "Nombre Usuario", "Nombre", "Apellido Paterno", "Apellido Materno",
                "Orden Compra DT", "Importe", "Total Pagar", "Status Facturación", "Project Code",
                "Project Name", "Customer", "Shipment NO", "Site Code", "Site Name", "Item Code", "Item Desc",
                "Requested Qty", "Due Qty", "Billed Qty", "Unit Price", "Line Amount", "Unit", "Payment Terms",
                "Category", "Bidding Area", "Publish Date"};
            String SQL = "select asignaciones.id_asignacion, asignaciones.fecha_asignacion, asignaciones.id, \n"
                    + "facturacion.PO_NO, asignaciones.id_usuario, usuarios.nombre_usuario, usuarios.nombre, \n"
                    + "usuarios.ape_pat, usuarios.ape_mat, asignaciones.orden_compra_dt, asignaciones.importe, \n"
                    + "asignaciones.total_pagar, asignaciones.status_facturacion, facturacion.project_code, \n"
                    + "facturacion.project_name, facturacion.customer, facturacion.shipment_NO, \n"
                    + "facturacion.site_code, facturacion.site_name, facturacion.item_code, facturacion.item_desc, \n"
                    + "facturacion.requested_qty, facturacion.due_qty, facturacion.billed_qty, \n"
                    + "facturacion.unit_price, facturacion.line_amount, facturacion.unit, facturacion.payment_terms, \n"
                    + "facturacion.category, facturacion.bidding_area, facturacion.publish_date \n"
                    + "from asignaciones, usuarios, facturacion \n"
                    + "where PO_NO like '" + buscarpo + "' && publish_date like '%" + fechapublicacion + "%' && \n"
                    + "usuarios.cat_usuario = 'Administrador Facturacion' && \n"
                    + "asignaciones.id_usuario = " + ID_Usuario_Facturas.getText() + " && usuarios.id_usuario =" + ID_Usuario_Facturas.getText() + "&& facturacion.id = asignaciones.id \n"
                    + "order by id_asignacion asc;";
            model1 = new DefaultTableModel(null, titulos);
            sent = cc.createStatement();
            rs = sent.executeQuery(SQL);
            String[] fila = new String[31];
            while (rs.next()) {
                fila[0] = rs.getString("id_asignacion");
                fila[1] = rs.getString("fecha_asignacion");
                fila[2] = rs.getString("id");
                fila[3] = rs.getString("PO_NO");
                fila[4] = rs.getString("id_usuario");
                fila[5] = rs.getString("nombre_usuario");
                fila[6] = rs.getString("nombre");
                fila[7] = rs.getString("ape_pat");
                fila[8] = rs.getString("ape_mat");
                fila[9] = rs.getString("orden_compra_dt");
                fila[10] = rs.getString("importe");
                fila[11] = rs.getString("total_pagar");
                fila[12] = rs.getString("status_facturacion");
                fila[13] = rs.getString("project_code");
                fila[14] = rs.getString("project_name");
                fila[15] = rs.getString("customer");
                fila[16] = rs.getString("shipment_NO");
                fila[17] = rs.getString("site_code");
                fila[18] = rs.getString("site_name");
                fila[19] = rs.getString("item_code");
                fila[20] = rs.getString("item_desc");
                fila[21] = rs.getString("requested_qty");
                fila[22] = rs.getString("due_qty");
                fila[23] = rs.getString("billed_qty");
                fila[24] = rs.getString("unit_price");
                fila[25] = rs.getString("line_amount");
                fila[26] = rs.getString("unit");
                fila[27] = rs.getString("payment_terms");
                fila[28] = rs.getString("category");
                fila[29] = rs.getString("bidding_area");
                fila[30] = rs.getString("publish_date");
                model1.addRow(fila);
            }
            Tabla_Facturas.setModel(model1);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al Llenar Tabla: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                    rs = null;
                } catch (SQLException ex) {
                    Logger.getLogger(Facturas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (sent != null) {
                try {
                    sent.close();
                    sent = null;
                } catch (SQLException ex) {
                    Logger.getLogger(Facturas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (cc != null) {
                try {
                    cc.close();
                    cc = null;
                } catch (SQLException ex) {
                    Logger.getLogger(Facturas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    public void LlenarTablaFacturas() {
        //String id; 
        //String id = ID_Usuario_Facturas.getText();
        try {
            cc = ConexionBD.getcon();
            String[] titulos = {"ID Asignación", "Fecha de Asignación", "ID", "PO NO", "ID Usuario",
                "Nombre Usuario", "Nombre", "Apellido Paterno", "Apellido Materno",
                "Orden Compra DT", "Importe", "Total Pagar", "Status Facturación", "Project Code",
                "Project Name", "Customer", "Shipment NO", "Site Code", "Site Name", "Item Code", "Item Desc",
                "Requested Qty", "Due Qty", "Billed Qty", "Unit Price", "Line Amount", "Unit", "Payment Terms",
                "Category", "Bidding Area", "Publish Date"};

            String SQL = "select asignaciones.id_asignacion, asignaciones.fecha_asignacion, asignaciones.id, \n"
                    + "facturacion.PO_NO, asignaciones.id_usuario, usuarios.nombre_usuario, usuarios.nombre, \n"
                    + "usuarios.ape_pat, usuarios.ape_mat, asignaciones.orden_compra_dt, asignaciones.importe, \n"
                    + "asignaciones.total_pagar, asignaciones.status_facturacion, facturacion.project_code, \n"
                    + "facturacion.project_name, facturacion.customer, facturacion.shipment_NO, \n"
                    + "facturacion.site_code, facturacion.site_name, facturacion.item_code, facturacion.item_desc, \n"
                    + "facturacion.requested_qty, facturacion.due_qty, facturacion.billed_qty, \n"
                    + "facturacion.unit_price, facturacion.line_amount, facturacion.unit, facturacion.payment_terms, \n"
                    + "facturacion.category, facturacion.bidding_area, facturacion.publish_date \n"
                    + "from asignaciones, usuarios, facturacion \n"
                    + "where asignaciones.id_usuario=" + ID_Usuario_Facturas.getText() + " && \n"
                    + "usuarios.id_usuario=" + ID_Usuario_Facturas.getText() + " && facturacion.id = asignaciones.id \n"
                    + "order by id_asignacion asc;";
            //tabla1.setModel(model);
            model1 = new DefaultTableModel(null, titulos);
            sent = cc.createStatement();
            rs = sent.executeQuery(SQL);
            String[] fila = new String[31];
            while (rs.next()) {
                fila[0] = rs.getString("id_asignacion");
                fila[1] = rs.getString("fecha_asignacion");
                fila[2] = rs.getString("id");
                fila[3] = rs.getString("PO_NO");
                fila[4] = rs.getString("id_usuario");
                fila[5] = rs.getString("nombre_usuario");
                fila[6] = rs.getString("nombre");
                fila[7] = rs.getString("ape_pat");
                fila[8] = rs.getString("ape_mat");
                fila[9] = rs.getString("orden_compra_dt");
                fila[10] = rs.getString("importe");
                fila[11] = rs.getString("total_pagar");
                fila[12] = rs.getString("status_facturacion");
                fila[13] = rs.getString("project_code");
                fila[14] = rs.getString("project_name");
                fila[15] = rs.getString("customer");
                fila[16] = rs.getString("shipment_NO");
                fila[17] = rs.getString("site_code");
                fila[18] = rs.getString("site_name");
                fila[19] = rs.getString("item_code");
                fila[20] = rs.getString("item_desc");
                fila[21] = rs.getString("requested_qty");
                fila[22] = rs.getString("due_qty");
                fila[23] = rs.getString("billed_qty");
                fila[24] = rs.getString("unit_price");
                fila[25] = rs.getString("line_amount");
                fila[26] = rs.getString("unit");
                fila[27] = rs.getString("payment_terms");
                fila[28] = rs.getString("category");
                fila[29] = rs.getString("bidding_area");
                fila[30] = rs.getString("publish_date");
                model1.addRow(fila);
            }
            Tabla_Facturas.setModel(model1);
        } catch (SQLException e) {            
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                    rs = null;
                } catch (SQLException ex) {
                    Logger.getLogger(Facturas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (sent != null) {
                try {
                    sent.close();
                    sent = null;
                } catch (SQLException ex) {
                    Logger.getLogger(Facturas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (cc != null) {
                try {
                    cc.close();
                    cc = null;
                } catch (SQLException ex) {
                    Logger.getLogger(Facturas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    public void ActualizarStatusPOImorteInicial() {
        try {
            cc = ConexionBD.getcon();
            if (DatosLlenosFactura() && orden_compra_dt.getText().equalsIgnoreCase("No Definido")) {
                String campo = ID.getText();
                String status = "CLOSED";
                String SQL = "update facturacion set PO_status=? where id=?";
                p = cc.prepareStatement(SQL);
                p.setString(1, status);
                p.setString(2, campo);
                int n = p.executeUpdate();
                if (n > 0) {
                    LlenarTablaFacturas();
                    ColumnasAutoajustadas(Tabla_Facturas, margin);
                    JOptionPane.showMessageDialog(null, "Status línea PO Completado");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Llena todos los campos: Si no cuenta con el dato ingrese 'No Definido'");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Hubo un error al actualizar los datos: " + e.getMessage());
        } finally {
            if (p != null) {
                try {
                    p.close();
                    p = null;
                } catch (SQLException ex) {
                    Logger.getLogger(Facturas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (cc != null) {
                try {
                    cc.close();
                    cc = null;
                } catch (SQLException ex) {
                    Logger.getLogger(Facturas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    public void ActualizarStatusPOImorteResto() {
        try {
            cc = ConexionBD.getcon();
            if (DatosLlenosFactura()) {
                String campo = ID.getText();
                String status = "ASIGNED";
                String SQL = "update facturacion set PO_status=? where id=?";
                p = cc.prepareStatement(SQL);
                p.setString(1, status);
                p.setString(2, campo);
                int n = p.executeUpdate();
                if (n > 0) {
                    LlenarTablaFacturas();
                    ColumnasAutoajustadas(Tabla_Facturas, margin);
                    JOptionPane.showMessageDialog(null, "Status línea PO No Completado");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Llena todos los campos: Si no cuenta con el dato ingrese 'No Definido'");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Hubo un error al actualizar los datos: " + e.getMessage());
        } finally {
            if (p != null) {
                try {
                    p.close();
                    p = null;
                } catch (SQLException ex) {
                    Logger.getLogger(Facturas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (cc != null) {
                try {
                    cc.close();
                    cc = null;
                } catch (SQLException ex) {
                    Logger.getLogger(Facturas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new FondoPanelTitulo();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel39 = new javax.swing.JLabel();
        po = new javax.swing.JTextField();
        status_line_PO = new javax.swing.JTextField();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        Tabla_Facturas = new javax.swing.JTable();
        jLabel45 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        importe_line_PO = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        date_asign = new com.toedter.calendar.JDateChooser();
        Nombre_Usuario_Facturas = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        publish = new com.toedter.calendar.JDateChooser();
        jLabel42 = new javax.swing.JLabel();
        total_line_amount = new javax.swing.JTextField();
        orden_compra_dt = new javax.swing.JTextField();
        jButton16 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        ID_Usuario_Facturas = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        sumar_monto = new javax.swing.JButton();
        restar_monto = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        falta = new javax.swing.JLabel();
        importe_ini = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ID = new javax.swing.JTextField();
        Fondo = new FondoPanelPrincipal();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel6.setBackground(new java.awt.Color(0, 102, 102));
        jPanel6.setPreferredSize(new java.awt.Dimension(1329, 60));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton4.setText("-");
        jButton4.setToolTipText("Minimizar");
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1230, 10, -1, -1));

        jButton5.setBackground(new java.awt.Color(169, 7, 6));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton5.setText("x");
        jButton5.setToolTipText("Cerrar");
        jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(1270, 10, -1, -1));

        jLabel39.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 24)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(255, 255, 255));
        jLabel39.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel39.setText("Gestión de Facturas (Proyectos)");
        jPanel6.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1320, 60));

        getContentPane().add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1320, -1));

        po.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        getContentPane().add(po, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 152, 182, -1));

        status_line_PO.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        status_line_PO.setEnabled(false);
        getContentPane().add(status_line_PO, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 430, 182, -1));

        jLabel49.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        jLabel49.setForeground(new java.awt.Color(255, 255, 255));
        jLabel49.setText("%");
        getContentPane().add(jLabel49, new org.netbeans.lib.awtextra.AbsoluteConstraints(1077, 385, -1, -1));

        jLabel50.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        jLabel50.setForeground(new java.awt.Color(255, 255, 255));
        jLabel50.setText("Importe (Line_PO):");
        getContentPane().add(jLabel50, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 310, -1, -1));

        jLabel43.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        jLabel43.setForeground(new java.awt.Color(255, 255, 255));
        jLabel43.setText("Fecha de Asignación:");
        getContentPane().add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(528, 130, -1, -1));

        Tabla_Facturas.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        Tabla_Facturas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Tabla_Facturas.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        Tabla_Facturas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                Tabla_FacturasMousePressed(evt);
            }
        });
        jScrollPane5.setViewportView(Tabla_Facturas);

        getContentPane().add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 212, 857, 239));

        jLabel45.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        jLabel45.setForeground(new java.awt.Color(255, 255, 255));
        jLabel45.setText("Ingrese los siguientes datos para realizar la búsqueda de un Proyecto.");
        getContentPane().add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 105, -1, -1));

        jLabel40.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        jLabel40.setForeground(new java.awt.Color(255, 255, 255));
        jLabel40.setText("ID_Usuario:");
        getContentPane().add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(398, 68, -1, -1));

        jButton11.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        jButton11.setText("Buscar");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 183, -1, -1));

        importe_line_PO.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        importe_line_PO.setEnabled(false);
        getContentPane().add(importe_line_PO, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 330, 182, -1));

        jLabel41.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        jLabel41.setForeground(new java.awt.Color(255, 255, 255));
        jLabel41.setText("Buscar por P.O:");
        getContentPane().add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, -1, -1));

        jLabel1.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Bienvenido (a):");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 68, -1, -1));

        jLabel46.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        jLabel46.setForeground(new java.awt.Color(255, 255, 255));
        jLabel46.setText("Orden de Compra DT:");
        getContentPane().add(jLabel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 260, -1, -1));

        jLabel47.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        jLabel47.setForeground(new java.awt.Color(255, 255, 255));
        jLabel47.setText("Total (Line_Amount):");
        getContentPane().add(jLabel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 360, -1, -1));

        date_asign.setDateFormatString("yyyy-MM-dd");
        date_asign.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        date_asign.setOpaque(false);
        getContentPane().add(date_asign, new org.netbeans.lib.awtextra.AbsoluteConstraints(528, 152, 182, -1));

        Nombre_Usuario_Facturas.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        Nombre_Usuario_Facturas.setForeground(new java.awt.Color(255, 255, 255));
        Nombre_Usuario_Facturas.setText("Nombre");
        getContentPane().add(Nombre_Usuario_Facturas, new org.netbeans.lib.awtextra.AbsoluteConstraints(89, 68, -1, -1));

        jLabel48.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        jLabel48.setForeground(new java.awt.Color(255, 255, 255));
        jLabel48.setText("Status (Line_PO):");
        getContentPane().add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 410, -1, -1));

        publish.setDateFormatString("yyyy-MM-dd");
        publish.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        publish.setOpaque(false);
        getContentPane().add(publish, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 152, 182, -1));

        jLabel42.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        jLabel42.setForeground(new java.awt.Color(255, 255, 255));
        jLabel42.setText("Publish Date:");
        getContentPane().add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 130, -1, -1));

        total_line_amount.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        total_line_amount.setEnabled(false);
        getContentPane().add(total_line_amount, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 380, 182, -1));

        orden_compra_dt.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        getContentPane().add(orden_compra_dt, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 280, 182, -1));

        jButton16.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        jButton16.setText("Mostrar Todos");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton16, new org.netbeans.lib.awtextra.AbsoluteConstraints(85, 183, -1, -1));

        jButton1.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        jButton1.setText("Regresar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(663, 64, -1, -1));

        jButton2.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        jButton2.setText("Cerrar Sesión");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(758, 64, -1, -1));

        ID_Usuario_Facturas.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        ID_Usuario_Facturas.setForeground(new java.awt.Color(255, 255, 255));
        ID_Usuario_Facturas.setText("ID");
        getContentPane().add(ID_Usuario_Facturas, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 68, -1, -1));

        jButton3.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        jButton3.setText("Actualizar Orden Compra DT");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 280, -1, -1));

        sumar_monto.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        sumar_monto.setText("Sumar Importe");
        sumar_monto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sumar_montoActionPerformed(evt);
            }
        });
        getContentPane().add(sumar_monto, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 330, 105, -1));

        restar_monto.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        restar_monto.setText("Restar Importe");
        restar_monto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restar_montoActionPerformed(evt);
            }
        });
        getContentPane().add(restar_monto, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 360, -1, -1));

        jLabel2.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Cantidad faltante:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 310, -1, -1));

        falta.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        falta.setForeground(new java.awt.Color(255, 255, 255));
        falta.setText("00.00");
        getContentPane().add(falta, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 310, -1, -1));

        importe_ini.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 11)); // NOI18N
        importe_ini.setText("Importe Inicial");
        importe_ini.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importe_iniActionPerformed(evt);
            }
        });
        getContentPane().add(importe_ini, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 330, -1, -1));

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("$");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 340, -1, -1));

        jLabel4.setText("ID");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 210, -1, 10));
        getContentPane().add(ID, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 230, 180, -1));

        Fondo.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                FondoMouseDragged(evt);
            }
        });
        Fondo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                FondoMousePressed(evt);
            }
        });
        getContentPane().add(Fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1320, 490));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void Tabla_FacturasMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tabla_FacturasMousePressed
        int fila = Tabla_Facturas.getSelectedRow();

        try {
            cc = ConexionBD.getcon();
            //String SQL = "SELECT * FROM asignaciones WHERE id_asignacion='" + Tabla_Facturas.getValueAt(fila, 0) + "'";
            String SQL = "select asignaciones.id_asignacion, asignaciones.fecha_asignacion, asignaciones.id, \n"
                    + "facturacion.PO_NO, asignaciones.id_usuario, usuarios.nombre_usuario, usuarios.nombre, \n"
                    + "usuarios.ape_pat, usuarios.ape_mat, asignaciones.orden_compra_dt, asignaciones.importe, \n"
                    + "asignaciones.total_pagar, asignaciones.status_facturacion, facturacion.project_code, \n"
                    + "facturacion.project_name, facturacion.customer, facturacion.shipment_NO, \n"
                    + "facturacion.site_code, facturacion.site_name, facturacion.item_code, facturacion.item_desc, \n"
                    + "facturacion.requested_qty, facturacion.due_qty, facturacion.billed_qty, \n"
                    + "facturacion.unit_price, facturacion.line_amount, facturacion.unit, facturacion.payment_terms, \n"
                    + "facturacion.category, facturacion.bidding_area, facturacion.publish_date \n"
                    + "from asignaciones, usuarios, facturacion \n"
                    + "where asignaciones.id_usuario=" + ID_Usuario_Facturas.getText() + " && \n"
                    + "usuarios.id_usuario=" + ID_Usuario_Facturas.getText() + " && facturacion.id = asignaciones.id && \n"
                    + "id_asignacion=" + Tabla_Facturas.getValueAt(fila, 0) + "";
            sent = cc.createStatement();
            rs = sent.executeQuery(SQL);
            rs.next();
            ID.setText(rs.getString("id"));
            orden_compra_dt.setText(rs.getString("orden_compra_dt"));
            importe_line_PO.setText(rs.getString("importe"));
            total_line_amount.setText(rs.getString("line_amount"));
            status_line_PO.setText(rs.getString("status_facturacion"));
            if (status_line_PO.getText().equals("100") && !importe_line_PO.getText().equals("0")) {
                sumar_monto.setEnabled(false);
                restar_monto.setEnabled(true);
            } else {
                sumar_monto.setEnabled(true);
                restar_monto.setEnabled(true);
            }

            if (status_line_PO.getText().equals("0") && importe_line_PO.getText().equals("0")) {
                importe_ini.setEnabled(true);
                sumar_monto.setEnabled(false);
            } else {
                importe_ini.setEnabled(false);
                sumar_monto.setEnabled(true);
            }
            /**
             * switch (status_line_PO.getText()) { case "100":
             *
             * break; case "100.00": sumar_monto.setEnabled(false); break;
             * default: sumar_monto.setEnabled(true); break; }
             *
             *
             *
             * switch (importe_line_PO.getText()) { case "0.00":
             * sumar_monto.setEnabled(false); restar_monto.setEnabled(false);
             * importe_ini.setEnabled(true); break; case "0.0":
             * sumar_monto.setEnabled(false); restar_monto.setEnabled(false);
             * importe_ini.setEnabled(true); break; default:
             * sumar_monto.setEnabled(true); restar_monto.setEnabled(true);
             * importe_ini.setEnabled(false); break; }
             *
             */
            double total = Double.parseDouble(total_line_amount.getText());
            double importe = Double.parseDouble(importe_line_PO.getText());
            double faltante;
            faltante = total - importe;
            faltante = Math.round(faltante * 100) / 100d;
            String dato = String.valueOf(faltante);
            falta.setText(dato);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error en la selección de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                    rs = null;
                } catch (SQLException ex) {
                    Logger.getLogger(Facturas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (sent != null) {
                try {
                    sent.close();
                    sent = null;
                } catch (SQLException ex) {
                    Logger.getLogger(Facturas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (cc != null) {
                try {
                    cc.close();
                    cc = null;
                } catch (SQLException ex) {
                    Logger.getLogger(Facturas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_Tabla_FacturasMousePressed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        BuscarPO();
        ColumnasAutoajustadas(Tabla_Facturas, margin);
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();
        AdministradorFacturacion AF = new AdministradorFacturacion();
        AF.setVisible(true);
        AdministradorFacturacion.ID_Usuario.setText(ID_Usuario_Facturas.getText());
        AF.Nombre_UsuarioAdmin.setText(Nombre_Usuario_Facturas.getText());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            cc = ConexionBD.getcon();
            if (DatosLlenosFactura()) {
                int fila = Tabla_Facturas.getSelectedRow();
                String SQL = "update asignaciones set orden_compra_dt=? where id_asignacion=" + Tabla_Facturas.getValueAt(fila, 0) + "";
                p = cc.prepareStatement(SQL);
                p.setString(1, orden_compra_dt.getText());
                int n = p.executeUpdate();
                if (n > 0) {
                    LlenarTablaFacturas();
                    ColumnasAutoajustadas(Tabla_Facturas, margin);
                    JOptionPane.showMessageDialog(null, "Orden de Compra Actualizada Correctamente");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Llena todos los campos: Si no cuenta con el dato ingrese 'No Definido'");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Hubo un error al actualizar los datos: " + e.getMessage());
        } finally {
            if (p != null) {
                try {
                    p.close();
                    p = null;
                } catch (SQLException ex) {
                    Logger.getLogger(Facturas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (cc != null) {
                try {
                    cc.close();
                    cc = null;
                } catch (SQLException ex) {
                    Logger.getLogger(Facturas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void sumar_montoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sumar_montoActionPerformed
        int fila = Tabla_Facturas.getSelectedRow();
        try {
            try {
                double total = Double.parseDouble(total_line_amount.getText());
                double importe = Double.parseDouble(importe_line_PO.getText());
                double faltan = Double.parseDouble(falta.getText());
                double sumo_importe = Double.parseDouble(JOptionPane.showInputDialog("Ingresa el Monto a cubrir:", "Agrega el Importe"));
                if (sumo_importe >= 0) {
                    if (sumo_importe <= faltan) {
                        try {
                            cc = ConexionBD.getcon();
                            if (DatosLlenosFactura()) {
                                double maximus;
                                maximus = importe + sumo_importe;
                                maximus = Math.round(maximus * 100) / 100d;
                                double porcentaje_linea_PO;
                                porcentaje_linea_PO = (float) ((maximus * 100) / total);
                                porcentaje_linea_PO = Math.round(porcentaje_linea_PO * 100) / 100d;
                                String SQL = "update asignaciones set importe=" + maximus + ", status_facturacion=" + porcentaje_linea_PO + " where id_asignacion=" + Tabla_Facturas.getValueAt(fila, 0) + "";
                                p = cc.prepareStatement(SQL);
                                int n = p.executeUpdate();
                                if (n > 0) {
                                    LlenarTablaFacturas();
                                    ColumnasAutoajustadas(Tabla_Facturas, margin);
                                    JOptionPane.showMessageDialog(null, "Datos Actualizados Correctamente");
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Llena todos los campos");
                            }
                        } catch (SQLException e) {
                            JOptionPane.showMessageDialog(null, "Error en la actualización de los datos de Asignaciones: " + e.getMessage());
                        } finally {
                            if (p != null) {
                                try {
                                    p.close();
                                    p = null;
                                } catch (SQLException ex) {
                                    Logger.getLogger(Facturas.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                            if (cc != null) {
                                try {
                                    cc.close();
                                    cc = null;
                                } catch (SQLException ex) {
                                    Logger.getLogger(Facturas.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "La cantidad ingresada supera el Monto Total de la Linea PO");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El valor no puede ser menor que cero.", "Error de entrada de datos", 0);
                }
            } catch (HeadlessException | NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "El valor ingresado no es un número válido." + e.getMessage(), "Error de Entrada de Datos", 0);
            }
        } catch (NullPointerException e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_sumar_montoActionPerformed

    private void restar_montoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restar_montoActionPerformed
        int fila = Tabla_Facturas.getSelectedRow();
        try {
            try {
                double total = Double.parseDouble(total_line_amount.getText());
                double importe = Double.parseDouble(importe_line_PO.getText());
                double resto_importe = Double.parseDouble(JOptionPane.showInputDialog(null, "Ingresa el Monto a restar:"));
                if (resto_importe >= 0) {
                    if (resto_importe <= importe) {
                        try {
                            cc = ConexionBD.getcon();
                            if (DatosLlenosFactura()) {
                                double minus;
                                minus = importe - resto_importe;
                                minus = Math.round(minus * 100) / 100d;
                                double porcentaje_linea_PO;
                                porcentaje_linea_PO = (float) ((minus * 100) / total);
                                porcentaje_linea_PO = Math.round(porcentaje_linea_PO * 100) / 100d;
                                String SQL = "update asignaciones set importe=" + minus + ", status_facturacion=" + porcentaje_linea_PO + " where id_asignacion=" + Tabla_Facturas.getValueAt(fila, 0) + "";
                                p = cc.prepareStatement(SQL);
                                int n = p.executeUpdate();
                                if (n > 0) {
                                    if (porcentaje_linea_PO != 100) {
                                        ActualizarStatusPOImorteResto();
                                    }
                                    LlenarTablaFacturas();
                                    ColumnasAutoajustadas(Tabla_Facturas, margin);
                                    JOptionPane.showMessageDialog(null, "Datos Actualizados Correctamente");
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Llena todos los campos");
                            }
                        } catch (SQLException e) {
                            JOptionPane.showMessageDialog(null, "Error en la actualización de los datos de Asignaciones: " + e.getMessage());
                        } finally {
                            if (p != null) {
                                try {
                                    p.close();
                                    p = null;
                                } catch (SQLException ex) {
                                    Logger.getLogger(Facturas.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                            if (cc != null) {
                                try {
                                    cc.close();
                                    cc = null;
                                } catch (SQLException ex) {
                                    Logger.getLogger(Facturas.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "La cantidad ingresada supera el Monto Total a restar de la Linea PO");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El valor no puede ser menor que cero.", "Error de entrada de datos", 0);
                }
            } catch (HeadlessException | NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "El valor ingresado no es un número válido." + e.getMessage(), "Error de Entrada de Datos", 0);
            }
        } catch (NullPointerException e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_restar_montoActionPerformed

    private void importe_iniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importe_iniActionPerformed
        int fila = Tabla_Facturas.getSelectedRow();
        try {
            try {
                double total = Double.parseDouble(total_line_amount.getText());
                double importe = Double.parseDouble(JOptionPane.showInputDialog("Ingresa el Monto Inicial a cubrir:", "Agrega el Importe Inicial"));
                if (importe >= 0) {
                    if (importe <= total) {
                        try {
                            cc = ConexionBD.getcon();
                            if (DatosLlenosFactura()) {
                                double porcentaje_linea_PO;
                                porcentaje_linea_PO = (float) ((importe * 100) / total);
                                porcentaje_linea_PO = Math.round(porcentaje_linea_PO * 100) / 100d;
                                String SQL = "update asignaciones set importe=" + importe + ", status_facturacion=" + porcentaje_linea_PO + " where id_asignacion=" + Tabla_Facturas.getValueAt(fila, 0) + "";
                                p = cc.prepareStatement(SQL);
                                int n = p.executeUpdate();
                                if (n > 0) {
                                    if (porcentaje_linea_PO == 100) {
                                        ActualizarStatusPOImorteInicial();
                                    }
                                    JOptionPane.showMessageDialog(null, "Datos Actualizados Correctamente");
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Llena todos los campos");
                            }
                        } catch (SQLException e) {
                            JOptionPane.showMessageDialog(null, "Error en la actualización de los datos de Asignaciones: " + e.getMessage());
                        } finally {
                            if (p != null) {
                                try {
                                    p.close();
                                    p = null;
                                } catch (SQLException ex) {
                                    Logger.getLogger(Facturas.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                            if (cc != null) {
                                try {
                                    cc.close();
                                    cc = null;
                                } catch (SQLException ex) {
                                    Logger.getLogger(Facturas.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "La cantidad ingresada supera el Monto Total de la Linea PO");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El valor no puede ser menor que cero.", "Error de entrada de datos", 0);
                }
            } catch (HeadlessException | NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "El valor ingresado no es un número válido." + e.getMessage(), "Error de Entrada de Datos", 0);
            }
        } catch (NullPointerException e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_importe_iniActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setExtendedState(ICONIFIED);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void FondoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FondoMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_FondoMousePressed

    private void FondoMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FondoMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_FondoMouseDragged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();
        Login log = new Login();
        log.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        LlenarTablaFacturas();
        ColumnasAutoajustadas(Tabla_Facturas, margin);
    }//GEN-LAST:event_jButton16ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Facturas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Facturas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Fondo;
    private javax.swing.JTextField ID;
    public static javax.swing.JLabel ID_Usuario_Facturas;
    public javax.swing.JLabel Nombre_Usuario_Facturas;
    public static javax.swing.JTable Tabla_Facturas;
    private com.toedter.calendar.JDateChooser date_asign;
    private javax.swing.JLabel falta;
    private javax.swing.JButton importe_ini;
    private javax.swing.JTextField importe_line_PO;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextField orden_compra_dt;
    private javax.swing.JTextField po;
    private com.toedter.calendar.JDateChooser publish;
    private javax.swing.JButton restar_monto;
    private javax.swing.JTextField status_line_PO;
    private javax.swing.JButton sumar_monto;
    private javax.swing.JTextField total_line_amount;
    // End of variables declaration//GEN-END:variables

    class FondoPanelPrincipal extends JLabel {

        private Image imagen;

        @Override
        public void paint(Graphics g) {
            imagen = new ImageIcon(getClass().getResource("/Imagenes/Background2.png")).getImage();
            g.drawImage(imagen, 0, 0, getWidth(), getHeight(), this);
            setOpaque(false);
            super.paint(g);
        }
    }

    class FondoPanelTitulo extends JPanel {

        private Image imagen;

        @Override
        public void paint(Graphics g) {
            imagen = new ImageIcon(getClass().getResource("/Imagenes/Clear Sky.jpg")).getImage();
            g.drawImage(imagen, 0, 0, getWidth(), getHeight(), this);
            setOpaque(false);
            super.paint(g);
        }
    }
}
